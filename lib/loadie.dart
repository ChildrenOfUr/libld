library loadie;
import 'dart:async';
import 'dart:html';
import 'dart:convert';

// add extentions to this list to allow the loading of non-standard text files.
List <String> textExtensions = 
[
 'txt'
];

// add extentions to this list to allow the loading of non-standard json files.
List <String> jsonExtensions = 
[
 'json'
];

// image extentions cannot be changed.
final List <String> imageExtensions = 
[
 'svg',
 'png',
 'jpg',
 'jpeg',
 'gif',
 'bmp'
];

// audio extentions cannot be changed.
final List <String> audioExtensions = 
[
 'mp3',
 'ogg'
];



// a helper class for loading bars and such.
// the callback function will be provided with the percent of the batch that is loaded.
class Batch {
  Map assets = {};
  List _toLoad = [];
  int _percentDone = 0;
  Batch(List <Asset> toLoad){this._toLoad = toLoad;}
  Future load(Function callback){
    Completer c = new Completer();
    int percentEach = 100~/_toLoad.length;
    List <Future> toLoad = [];    
   for (Asset a in _toLoad)
     toLoad.add(a.load());
   Future.forEach(toLoad,(Future futureAsset)
       {
     futureAsset.then((Asset newAsset) 
         {
       // Broadcast that we loaded a file.
       _percentDone += percentEach;
       callback(_percentDone);

       // Add the loaded asset to a Map with it's filename as a label.
       String filename = newAsset._uri.split('/')[newAsset._uri.split('/').length - 1].split('.')[0];
       if (assets.containsKey(filename)){throw('Filename already in use!');}
       else
         // At this point,
         // we won't need any part of the Asset object except it's contents.
         assets[filename] = newAsset.get();
         });
         }).then((_) => c.complete());
   return c.future;
  }
}



class Asset{
  var _asset;
  bool loaded = false;
  String _uri;
  
  Asset(String uri){this._uri = uri;}
  
  Future <Asset> load(){
    print('Started:' + _uri);
    Completer c = new Completer();    
    if (loaded == false){

      // loads ImageElements into memory
      for (String ext in imageExtensions)
      {
        if (_uri.endsWith('.' + ext))
        {
          this._asset = new ImageElement()
          ..src = _uri
          ..classes.add('!-autogenerated-!');
          _asset.onLoad.listen((_) {print('Finished:' + _uri);loaded = true;c.complete(this);});
        }
      }
      
      // loads AudioElements into memory
      for (String ext in audioExtensions)
      {
        if (_uri.endsWith('.' + ext))
        {
          AudioElement audio = new AudioElement()
          ..src = _uri
          ..classes.add('!-autogenerated-!');
          AudioElement a = document.body.append(audio);
          audio.onCanPlay.listen((_) {print('Finished:' + _uri);this._asset= audio;_asset;loaded = true;c.complete(this);});
        }
      }
      
      // loads simple text files as a string.
      for (String ext in textExtensions)
      {
        if (_uri.endsWith('.' + ext))
        {
          HttpRequest.getString(_uri).then
          ((String string)  {
            _asset = string;
            loaded = true;
            print('Finished:' + _uri);
            c.complete(this);
            });
        }
      }
      
      // Returns a decoded object from a json file
      for (String ext in jsonExtensions)
      {
        if (_uri.endsWith('.' + ext))
        {
          HttpRequest.getString(_uri).then
          ((String string)  {
            print('Finished:' + _uri);
            _asset =  JSON.decode(string);
            loaded = true;
            c.complete(this);
            });
        }
      }

      return c.future;
    }
  
  }  

  
  get(){
    if (loaded == false)
      throw('Asset not yet loaded!');
    else
    return _asset;
  }
}